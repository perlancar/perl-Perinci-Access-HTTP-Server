#!perl

use 5.010;
use strict;
use warnings;
use Log::Any qw($log);

# early loading to avoid target module being loaded before the patch
use Perinci::Access::Base::Patch::PeriAHS;

use File::HomeDir;
use File::Write::Rotate;
use Module::List qw(list_modules);
use Module::Load qw(load autoload);
use Perinci::CmdLine::Any;
use Perinci::Gen::ForModule qw(gen_meta_for_module);
use Plack::Builder;
use Plack::Runner;

# VERSION

our %SPEC;

$SPEC{serve} = {
    v => 1.1,
    summary => 'Serve Perl modules over HTTP(S) using Riap::HTTP protocol',
    description => <<'_',

This is a simple command-line front-end for making Perl modules accessible over
HTTP(S), using the Riap::HTTP protocol. First the specified Perl modules will be
loaded. Modules which do not contain Rinci metadata will be equipped with
metadata using Perinci::Sub::Gen::ForModule. After that, a PSGI application will
be run with the Gepok or Starman PSGI server. The PSGI application serves
requests for function calls (or other kinds of Riap request) over HTTP. Perl
modules not specified in the command-line arguments will not be accessible,
since Perinci::Access::Schemeless is used with load=>0.

Modules can be accessed using URL:

 http://HOSTNAME:PORT/api/MODULE/SUBMOD/FUNCTION?ARG1=VAL1&...

This program is mainly for testing, not recommended to be used in production,
and there are not many configuration options provided. For production, it is
recommended that you construct your own PSGI application and compose the
Plack::Middleware::PeriAHS::* middlewares directly.

_
    args => {
        module_or_package => {
            schema => ['array*' => {
                of => 'str*',
                min_len => 1,
            }],
            req => 1,
            pos => 0,
            greedy => 1,
            summary => 'List of modules to load (or package to allow and search)',
            description => <<'_',

Either specify exact module name like `Foo::Bar`, or a wildcard pattern of
modules like `Foo::Bar::*` (in which `Module::List` will be used to load all
modules under `Foo::Bar::`) or a package name using `+Foo::Bar` syntax. If you
specify package name, module with the same name will not be loaded. Can be used
to allow and search an already loaded package (e.g. through `-M` or through
other modules).

_
            cmdline_on_getopt => sub {
                my %args = @_;
                my $val  = $args{value};
                my $args = $args{args};

                # put it here for function later
                $args->{-modules}  //= [];
                $args->{-packages} //= [];

                if ($val =~ /(.+::)\*$/) {
                    $log->debugf('Listing all modules in %s ...', $val);
                    my $res = list_modules($1, {list_modules=>1});
                    push @{ $args->{-modules}  }, sort keys %$res;
                } elsif ($val =~ s/^\+//) {
                    push @{ $args->{-packages} }, $val;
                } else {
                    push @{ $args->{-modules}  }, $val;
                }
            },
        },
        riap_access_log_path => {
            schema => ['str' => {}],
            summary => 'Path for Riap request access log file',
            description => <<'_',

Default is ~/peri-htserve-riap_access.log

_
        },
        riap_access_log_size => {
            schema => ['int' => {}],
            summary => 'Maximum size for Riap request access log file',
            description => <<'_',

Default is to use File::Write::Rotate's default (10485760, a.k.a. 10MB).

If size exceeds this, file will be rotated.

_
        },
        riap_access_log_histories => {
            schema => ['int' => {}],
            summary => 'Number of old Riap request access log files to keep',
            description => <<'_',

Default is to use File::Write::Rotate's default (10).

_
        },
        server => {
            schema => ['str*' => {
                in => [qw/Starman Gepok/],
                default => 'Gepok',
            }],
            summary => 'Choose PSGI server',
            description => <<'_',

Currently only Starman or Gepok is supported. Default is Gepok.

_
        },
        starman_host => {
            schema => ['str' => {}],
            summary => 'Will be passed to Starman',
        },
        starman_port => {
            schema => ['int' => {}],
            summary => 'Will be passed to Starman',
        },
        gepok_http_ports => {
            schema => ['str' => {}],
            summary => 'Will be passed to Gepok',
        },
        gepok_https_ports => {
            schema => ['str' => {}],
            summary => 'Will be passed to Gepok',
        },
        gepok_unix_sockets => {
            schema => ['str' => {}],
            summary => 'Will be passed to Gepok',
        },
        gepok_ssl_key_file => {
            schema => ['str' => {}],
            summary => 'Will be passed to Gepok',
        },
        gepok_ssl_cert_file => {
            schema => ['str' => {}],
            summary => 'Will be passed to Gepok',
        },
        gepok_start_servers => {
            schema => ['int' => {}],
            summary => 'Will be passed to Gepok',
        },
        daemonize => {
            schema => ['bool' => {
                default => 0,
            }],
            summary => 'If true, will daemonize into background',
            cmdline_aliases => {D=>{}},
        },
        library => {
            schema => ['array' => {
                of => 'str*',
            }],
            summary => 'Add directory to library search path, a la Perl\'s -I',
            description => <<'_',

Note that some modules are already loaded before this option takes effect. To
make sure some directories are processed, you can use `PERL5OPT` or explicitly
use `perl` and use its `-I` option.

_
            cmdline_aliases => {I=>{}},
            cmdline_on_getopt => sub {
                my %args = @_;
                require lib;
                lib->import($args{value});
            },
        },
        use => {
            schema => ['array' => of => 'str*'],
            summary => 'Use a Perl module, a la Perl\'s -M',
            cmdline_aliases => {M=>{}},
            cmdline_on_getopt => sub {
                my %args = @_;
                my $val = $args{value};
                if (my ($mod, $imp) = $val =~ /(.+?)=(.+)/) {
                    load $mod;
                    $mod->import(split /,/, $imp);
                } else {
                    autoload $val;
                }
            },
        },
        require => {
            schema => ['array' => of => 'str*'],
            summary => 'Require a Perl module, a la Perl\'s -m',
            cmdline_aliases => {m=>{}},
            cmdline_on_getopt => sub {
                my %args = @_;
                load $args{val};
            },
        },

        parse_form => {
            schema => ['bool'],
            summary => 'Passed to Plack::Middleware::PeriAHS::ParseRequest',
        },
        parse_reform => {
            schema => ['bool'],
            summary => 'Passed to Plack::Middleware::PeriAHS::ParseRequest',
        },
        parse_path_info => {
            schema => ['bool'],
            summary => 'Passed to Plack::Middleware::PeriAHS::ParseRequest',
        },
        user => {
            schema => ['str*'],
            summary => 'Protect with HTTP authentication, specify username',
        },
        password => {
            schema => ['str*'],
            summary => 'Protect with HTTP authentication, specify password',
        },
        enable_logging => {
            schema  => ['bool', default=>1],
            summary => 'Can be used to test server with no support for logging',
        },

        metadb => {
            summary => 'Path to SQLite Rinci metadata database',
            schema  => 'str*',
            description => <<'_',

This is an experimental option for testing serving metadata from database. If
set, will use `Perinci::Access::Schemeless::DBI` (with option
`fallback_on_completion`) instead of `Perinci::Access::Schemeless` for the Riap
client.

_
        },
    },
    'x.perinci.sub.wrapper.disable_validate_args' => 1,
};
sub serve {
    my %args = @_; # VXALIDATE_ARGS

    my $server = $args{server};
    #$log->tracef("TMP: modules/packages: %s", $args{module_or_package});
    $log->infof("Starting server (using %s) ...", $server);

    my $riap_access_log_path = $args{riap_access_log_path} //
        File::HomeDir->my_home . "/peri-htserve-riap_access.log";

    $log->debugf("Modules to load: %s", $args{-modules});
    for my $m (@{$args{-modules}}) {
        $log->infof("Loading module %s ...", $m);
        eval { load $m };
        return [500, "Failed to load module $m: $@"] if $@;
        gen_meta_for_module(module=>$m, load=>0);
    }

    my $fwr;
    {
        my ($dir, $leaf) = $riap_access_log_path =~ m!(.+)/(.+)!;
        if (!$dir) { $dir = "."; $leaf = $riap_access_log_path }
        $fwr = File::Write::Rotate->new(
            dir       => $dir,
            prefix    => $leaf,
            size      => $args{riap_access_log_size},
            histories => $args{riap_access_log_histories},
        );
    }

    my @pkgs = (@{ $args{-modules} // [] }, @{ $args{-packages} // [] });

    # let's only allow access to perl modules (and not other schemes like http).
    # let's not dynamically load modules except the ones explicitly specified
    # and loaded above. let's only allow seeing the specified modules.
    my $pa;
    {
        my $class;
        my %extra_opts;
        if ($args{metadb}) {
            $class = "Perinci::Access::Schemeless::DBI";
            $extra_opts{fallback_on_completion} = 1;

            require DBI;
            my $dbh = DBI->connect(
                "dbi:SQLite:dbname=$args{metadb}", "", "", {RaiseError=>1});
            $extra_opts{dbh} = $dbh;
        } else {
            $class = "Perinci::Access::Schemeless";
        }
        load $class;
        $pa = $class->new(
            load => 0,
            allow_paths => [map {s!::!/!g; "/$_"} @pkgs],
            %extra_opts,
        );
    }

    my $app = builder {
        enable(
            "PeriAHS::LogAccess",
            dest => $fwr,
        );

        #enable "PeriAHS::CheckAccess";

        if (defined($args{user}) && defined($args{password})) {
            enable(
                "Auth::Basic",
                authenticator => sub {
                    my ($user, $pass, $env) = @_;

                    if ($user eq $args{user} && $pass eq $args{password}) {
                        #$env->{"REMOTE_USER"} = $user; # isn't this already done by webserver?
                        return 1;
                    }
                    return 0;
                }
            );
        }

        enable(
            "PeriAHS::ParseRequest",
            parse_path_info => $args{parse_path_info},
            parse_form      => $args{parse_form},
            parse_reform    => $args{parse_reform},
            riap_client     => $pa,
        );

        enable (
            "PeriAHS::Respond",
            enable_logging => $args{enable_logging},
        );
    };

    my @argv;
    push @argv, "-s", $server;
    my @root_urls; # for hint
    if ($server eq 'Starman') {
        for (qw/host port/) {
            push @argv, "--$_", $args{"starman_$_"} if $args{"starman_$_"};
        }

        my $host = $args{starman_host} // 'localhost';
        my $port = $args{starman_port} // 8080;
        push @root_urls, "http://$host:$port/";
    } else {
        if (!$args{gepok_http_ports} &&
                !$args{gepok_https_ports} &&
                    !$args{gepok_unix_sockets}) {
            $args{gepok_http_ports} = "*:5000";
        }
        for (qw/http_port https_ports unix_sockets
                ssl_key_file ssl_cert_file start_servers/) {
            push @argv, "--$_", $args{"gepok_$_"} if defined $args{"gepok_$_"};
        }

        my ($host, $port) = @_;
        if ($args{gepok_http_ports}) {
            if ($args{gepok_http_ports} =~ /(.+?):(\d+)/) {
                $host = $1; $host = 'localhost' if $host eq '*';
                $port = $2;
            } elsif ($args{gepok_http_ports} =~ /(\d+)/) {
                $host = 'localhost';
                $port = $1;
            }
            push @root_urls, "http://$host:$port/";
        }
        if ($args{gepok_https_ports}) {
            if ($args{gepok_https_ports} =~ /(.+?):(\d+)/) {
                $host = $1; $host = 'localhost' if $host eq '*';
                $port = $2;
            } elsif ($args{gepok_https_ports} =~ /(\d+)/) {
                $host = 'localhost';
                $port = $1;
            }
            push @root_urls, "https://$host:$port/";
        }
        if ($args{gepok_unix_sockets}) {
            if ($args{gepok_unix_sockets} =~ /(.+?)(?:,|\z)/) {
                push @root_urls, "http:$1//";
            }
        }
    }

    # display hint for user
    if (@root_urls) {
        my @ep_urls; # api endpoints
        for my $root_url (@root_urls) {
            for my $pkg (@pkgs) {
                my $pkgp = $pkg; $pkgp =~ s!::!/!g;
                push @ep_urls, $root_url . "api/$pkgp/";
            }
        }
        say "Try accessing one of the following URLs with curl/riap/etc:";
        print map { "- $_\n" } @ep_urls;
        say "";
    }

    push @argv, "-D" if $args{daemonize};
    my $runner = Plack::Runner->new;
    $runner->parse_options(@argv);
    $runner->run($app);

    # never reached though
    [200, "OK"];
}

Perinci::CmdLine::Any->new(url => '/main/serve')->run;

#ABSTRACT: Serve Perl modules over HTTP(S) using the Riap::HTTP protocol
#PODNAME:

=head1 SYNOPSIS

 # serve modules over HTTP, using default options (HTTP port 5000)
 $ peri-htserve Foo::Bar Baz::*

 # you can now do
 $ curl 'http://localhost:5000/api/Baz/SubMod/func1?arg1=1&arg2=2'
 [200,"OK",{"The":"result","...":"..."}]

 # or use the Perl client
 $ perl -MPerinci::Access -e'
     my $pa = Perinci::Access->new;
     my $res = $pa->request(call=>"http://localhost:5000/api/Foo/Bar/func2");'


 ### some other peri-htserve options:

 # change ports/etc (see http_ports, https_ports, and unix_sockets in Gepok doc)
 $ peri-htserve --http-ports "localhost:5000,*:80" ...

 # see all available options
 $ peri-htserve --help


=head1 DESCRIPTION

For now, please see source code for more details (or --help).


=head1 QUICK TIPS

=head2 Complex argument

In raw HTTP, you can send complex argument by encoding it in JSON, e.g.:

 $ curl 'http://localhost:5000/api/Foo/Bar/func?array:j=[1,2,3]'

Notice the ":j" suffix after parameter name.


=head1 TODO

=over 4

=item * Pass more Plackup options.

=item * Pass more PSGI server options.

=back


=head1 SEE ALSO

L<Riap::HTTP>

L<Perinci::Access>, L<Perinci::Access::HTTP::Client>

PSGI servers used: L<Gepok>, L<Starman>

L<Plack::Runner>

=cut
